<?php declare(strict_types=1);
/** @noinspection PhpUnusedPrivateFieldInspection */
namespace Grifart\Stateful\TestClasses;

use Grifart\Stateful\State;
use Grifart\Stateful\StateBuilder;
use Grifart\Stateful\Stateful;

final class EmptyClass implements Stateful {

	public function _getState(): State
	{
		return State::from($this, 1, []);
	}


	public static function _fromState(State $state): static
	{
		return new self($state);
	}
}

final class SimpleObjectWithPrimitiveProperties implements Stateful {


	private $string = 8;
	private $float = 15;

	private const STATE_VERSION_0 = 36713727; // version generated by trait; want to try simulate code that was migrated from simple trait

	public function _getState(): State
	{
		return StateBuilder::from($this)
			->version(self::STATE_VERSION_0)
			->field('string', $this->string)
			->field('float', $this->float)
			->build();
	}

	public static function _fromState(State $state): static
	{
		assert($state->getVersion() === self::STATE_VERSION_0);

		$me = $state->makeAnEmptyObject(self::class);
		assert($me instanceof self);

		$me->float = $state['float'];
		$me->string = $state['string'];

		return $me;
	}
}


final class ComplexObjectWithReferenceToOtherObject implements Stateful {

	private $string = 'hello!';

	private $bool = true;

	private $int = 5;

	private $float = 5.5;

	private $object;

	public function __construct($theOtherObject)
	{
		assert(is_object($theOtherObject) || $theOtherObject === NULL);
		$this->object = $theOtherObject;
	}

	public static function noObject(): self
	{
		return new self(NULL);
	}

	public function _getState(): State
	{
		return State::from($this, 1, [
			'string' => $this->string,
			'bool'   => $this->bool,
			'int'    => $this->int,
			'float'  => $this->float,
			'object' => $this->object,
		]);
	}


	public static function _fromState(State $state): static
	{
		assert($state->getVersion() === 1);

		$me = $state->makeAnEmptyObject(ComplexObjectWithReferenceToOtherObject::class);

		$me->string = $state['string'];
		$me->bool   = $state['bool'];
		$me->int    = $state['int'];
		$me->float  = $state['float'];
		$me->object = $state['object'];

		return $me;
	}

	// getters, ...
}


final class ObjectWithUnserializableDateTimeImmutable implements Stateful {

	private $myDate;

	public function __construct()
	{
		$this->myDate = new \DateTimeImmutable('2017-02-17T20:20:22+01:00');
	}

	public function _getState(): State
	{
		return StateBuilder::from($this)
			->version(1)
			->field('myDate', $this->myDate)
			->build();
	}

	public static function _fromState(State $state): static
	{
		assert( $state->getVersion() === 1 );

		/** @var self $me */
		$me = $state->makeAnEmptyObject(self::class);
		$me->myDate = $state['myDate'];

		return $me;
	}

}


final class ObjectWithAnArrayOfPrimitives implements Stateful{

	private $list = [];

	public function __construct()
	{
		for($i=0;$i<10;$i++) {
			$this->list["key-$i"] = $i;
			$this->list[] = $i;
		}
	}

	public function _getState(): State
	{
		return StateBuilder::from($this)
			->version(1)
			->field('list', $this->list)
			->build();
	}

	public static function _fromState(State $state): static
	{
		assert($state->getVersion() === 1);

		$me = $state->makeObjectWithProperties(self::class);
		assert($me instanceof self);

		return $me;
	}
}


final class ObjectWithAnArrayOfObjects implements Stateful {

	private $list = [];

	public function __construct()
	{
		$this->list[] = new ComplexObjectWithReferenceToOtherObject(new SimpleObjectWithPrimitiveProperties());
		$this->list['cislo'] = 42;
		$this->list[] = new ObjectWithUnserializableDateTimeImmutable();
	}

	public function _getState(): State
	{
		return StateBuilder::from($this)
			->version(1)
			->field('list', $this->list)
			->build();
	}

	public static function _fromState(State $state): static
	{
		assert($state->getVersion() === 1);

		return $state->makeAnEmptyObject(self::class);
	}
}
